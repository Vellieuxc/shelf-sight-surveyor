
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://horzlrlmbfivzrmycauu.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImhvcnpscmxtYmZpdnpybXljYXV1Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDYxMDUzNzAsImV4cCI6MjA2MTY4MTM3MH0.jMtqLKCDe19sWWX_HTUyxGZiVNUuUYu8iQYgUETTBYs";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
  auth: {
    persistSession: true
  },
  global: {
    headers: {
      'X-App-Version': '1.0.0'
    }
  }
});

// Create a function to ensure the pictures storage bucket exists
export const ensurePicturesBucketExists = async () => {
  try {
    // First try to upload a small test file to see if the bucket exists and is accessible
    // This is more reliable than checking if the bucket exists since permissions might prevent listing buckets
    const testBlob = new Blob(['test'], { type: 'text/plain' });
    const { error: uploadError } = await supabase.storage
      .from('pictures')
      .upload(`test-${Date.now()}.txt`, testBlob, { upsert: true });
    
    if (!uploadError) {
      console.info('Pictures bucket is accessible');
      return; // Bucket exists and is accessible
    }
    
    // If upload failed with a 404, the bucket likely doesn't exist
    if (uploadError.message.includes('Bucket not found') || uploadError.statusCode === 404) {
      console.warn('Pictures bucket not found, attempting to create it');
      // If bucket doesn't exist, try to create it
      const { data: newBucket, error: createError } = await supabase.storage.createBucket('pictures', {
        public: true,
        allowedMimeTypes: ['image/png', 'image/jpeg', 'image/jpg', 'image/gif', 'image/webp'],
        fileSizeLimit: 5242880 // 5MB
      });
      
      if (createError) {
        console.error('Unable to create pictures bucket:', createError.message);
        throw new Error(`Failed to create pictures bucket: ${createError.message}`);
      } else {
        console.info('Created pictures bucket successfully');
      }
    } else {
      // Some other error occurred
      console.error('Error accessing pictures bucket:', uploadError.message);
      throw new Error(`Error accessing pictures bucket: ${uploadError.message}`);
    }
  } catch (error) {
    console.error('Error with pictures bucket:', error);
    // Rethrow the error so it can be handled by the caller
    throw error;
  }
};

// Don't call this function automatically on import
// Instead, it will be called explicitly before uploads
